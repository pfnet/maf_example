import os
import maf
import maflib
import matplotlib.pyplot as plt

VERSION = '0.0.0'
APPNAME = 'pydata_demo'

def options(opt): opt.load('maf')

def configure(conf): conf.load('maf')

    LIBLINEAR_METHODS = {
        0: 'L2R Logistic Regression (primal)',
        1: 'L2 SVM (dual)',
        2: 'L2 SVM (primal)',
        3: 'SVM (dual)',
        4: 'Multiclass SVM',
        5: 'L1R L2-loss SVM',
        6: 'L1R Logistic Regression',
        7: 'L2R Logistic Regression (dual)'
    }
def build(bld):
    if not os.path.exists('data/svmguide3'):
        bld(target = 'data/svmguide3',
            rule = maflib.rules.download('http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/svmguide3'),
        )

    NUM_FOLD = 10
    bld(source='data/svmguide3',
        target='data/train data/test',
        parameters=[{'fold': i} for i in range(NUM_FOLD)],
        rule=maflib.rules.segment_by_line(NUM_FOLD, 'fold'))
    bld(source='data/train',
        target='data/model log/train',
        parameters=maflib.util.product({
            'type': [1],
            'cost': [0.01]}),
        rule='liblinear-train -s ${type} -c ${cost} ${SRC} ${TGT[0].abspath()} > ${TGT[1].abspath()}')
    bld(source='data/test data/model',
        target='result/predict log/test',
        rule='liblinear-predict ${SRC} ${TGT[0].abspath()} > ${TGT[1].abspath()}')
    bld(source='log/test',
        target='result/accuracy',
        rule=maflib.rules.convert_libsvm_accuracy)
    bld(source='result/accuracy',
        target='result/average_accuracy',
        aggregate_by='fold',
        rule=maflib.rules.average)
    bld(source='result/average_accuracy',
        target='result/plot.png',
        aggregate_by='type cost',
        rule=maflib.plot.plot_line(x = {'key' : 'cost', 'scale': 'log'},
                                   y = 'accuracy',
                                   legend = {'key' : 'type', 'labels' : LIBLINEAR_METHODS}))


